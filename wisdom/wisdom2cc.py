#!/usr/bin/env python

# Copyright 2013 Ben Smith. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Script to generate .cc files from .wisdom files.

   It expects nput files to be named <arch>.<precision>.<x?>.wisdom.
"""

import optparse
import os
import sys

ARCH_DEFINES = {
  'x86-64': 'defined(__x86_64__)',
  'i686': 'defined(__i686__)',
  'pnacl': 'defined(__pnacl__)',
}

PRECISION_DEFINES = {
  'double': '!defined(USE_FLOAT)',
  'float': 'defined(USE_FLOAT)',
}

class Error(Exception):
  pass

def ProcessFile(infilename):
  if options.verbose:
    print 'Reading from %s' % infilename
  with open(infilename) as infile:
    indata = infile.readlines()

  filenameparts = os.path.basename(infilename).split('.')
  arch = filenameparts[0]
  precision = filenameparts[1]

  if arch not in ARCH_DEFINES:
    raise Error('Unknown arch: %s' % arch)

  if precision not in PRECISION_DEFINES:
    raise Error('Unknown precision: %s' % precision)

  outdata = []
  outdata.append('// Generated by wisdom2cc.py! Do not edit!')
  outdata.append('//   source: %s' % infilename)
  outdata.append('')
  outdata.append('#if %s && %s' % (ARCH_DEFINES[arch],
                                   PRECISION_DEFINES[precision]))
  outdata.append('#include "wisdom.h"')
  outdata.append('const char kWisdom512[] =')
  for line in indata:
    if line[-1] == '\n':
      line = line[:-1]
    outdata.append('  "%s\\n"' % line)
  # Add semicolon to last line.
  outdata[-1] += ';'
  outdata.append('#endif')

  outfilename = os.path.splitext(infilename)[0] + '.cc'
  if options.verbose:
    print 'Writing to %s' % outfilename
  with open(outfilename, 'w') as outfile:
    outfile.write('\n'.join(outdata) + '\n')


def main(argv):
  usage = 'Usage: %prog [options] <.wisdom>*'
  description = __doc__
  parser = optparse.OptionParser(usage, description=description)
  parser.add_option('-v', '--verbose', action='store_true',
                    help='Verbose output')
  global options
  options, args = parser.parse_args(argv)
  if not args:
    parser.error('No wisdom file given.')

  for arg in args:
    ProcessFile(arg)


if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
